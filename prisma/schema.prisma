generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator dbml {
  provider = "prisma-dbml-generator"
}

generator erd {
  provider = "prisma-erd-generator"
}

model Users {
  id                Int                 @id @default(autoincrement())
  firstName         String?
  lastName          String?
  dateOfBirth       DateTime?
  bio               String?
  gender            GENDERS?
  role              USER_ROLES?
  loginMethod       LOGIN_METHODS
  email             String?
  phoneNumber       String?
  isProfileComplete Boolean             @default(false)
  fcmToken          String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  UserAddress       UserAddress[]
  UserOTP           UserOTP[]
  UserStatus        UserStatus[]
  DriverDetails     DriverDetails[]
  UserPackages      UserPackages[]
  UserNotifications UserNotifications[]
  Messages          Messages[]
  JobRequests       JobRequests[]
  JobOffers         JobOffers[]
  Orders            Orders[]
  Feedback          Feedback[]
  DriversLocation   DriversLocation?
  driverReviews     DriverReviews[]     @relation("ReviewedDriver")
  reviewedBy        DriverReviews[]     @relation("Reviewer")
  UserVehicles      UserVehicles?
  UserRescueCharges UserRescueCharges?
  UserPreference    UserPreference?
}

model UserAddress {
  id            Int      @id @default(autoincrement())
  userId        Int
  country       String
  state         String
  city          String
  streetAddress String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  User          Users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserOTP {
  id                 Int       @id @default(autoincrement())
  userId             Int
  otp                String
  otpType            OTPT_TYPE
  isExpired          Boolean   @default(false)
  expirationDateTime DateTime
  createdAt          DateTime  @default(now())
  User               Users     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserStatus {
  id       Int      @id @default(autoincrement())
  userId   Int
  isOnline Boolean
  lastSeen DateTime
  User     Users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserVehicles {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  car       String
  model     String
  about     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      Users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model DriverDetails {
  id             Int      @id @default(autoincrement())
  userId         Int
  vehicleDetails String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  User           Users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model DriversLocation {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  latitude  Float
  longitude Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      Users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Packages {
  id                   Int            @id @default(autoincrement())
  name                 String
  description          String
  price                Float
  rescueChargesPerYear Int
  pricePerMile         Float
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  UserPackages         UserPackages[]
}

model UserPackages {
  id        Int      @id @default(autoincrement())
  userId    Int
  packageId Int
  isActive  Boolean  @default(true)
  expireAt  DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      Users    @relation(fields: [userId], references: [id], onDelete: Cascade)
  Package   Packages @relation(fields: [packageId], references: [id])
}

model UserRescueCharges {
  id               Int      @id @default(autoincrement())
  userId           Int      @unique
  chargesUsed      Int
  chargesRemaining Int
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  User             Users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserNotifications {
  id          Int      @id @default(autoincrement())
  userId      Int
  title       String
  description String
  hasSeen     Boolean  @default(false)
  createdAt   DateTime @default(now())
  User        Users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserPreference {
  id                       Int     @id @default(autoincrement())
  userId                   Int     @unique
  receivePushNotifications Boolean
  User                     Users   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Conversations {
  id          Int          @id @default(autoincrement())
  user1Id     Int
  user2Id     Int
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  Messages    Messages[]
  JobRequests JobRequests?
}

model Messages {
  id             Int           @id @default(autoincrement())
  conversationId Int
  senderId       Int
  content        String
  createdAt      DateTime      @default(now())
  Conversation   Conversations @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  User           Users         @relation(fields: [senderId], references: [id])
}

model DriverReviews {
  id        Int      @id @default(autoincrement())
  driverId  Int
  userId    Int
  rating    Int
  comment   String
  createdAt DateTime @default(now())
  Driver    Users    @relation("ReviewedDriver", fields: [driverId], references: [id])
  Reviewer  Users    @relation("Reviewer", fields: [userId], references: [id])
}

model JobRequests {
  id             Int            @id @default(autoincrement())
  userId         Int
  latitude       Float
  longitude      Float
  milesRequired  Int
  radius         Float
  chargingType   String
  hasAccepted    Boolean        @default(false)
  hasPaid        Boolean        @default(false)
  hasLeftReview  Boolean        @default(false)
  conversationId Int?           @unique
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  User           Users          @relation(fields: [userId], references: [id])
  Conversation   Conversations? @relation(fields: [conversationId], references: [id])
  JobOffers      JobOffers[]
}

model JobOffers {
  id           Int         @id @default(autoincrement())
  jobRequestId Int
  driverId     Int
  status       JOB_STATUS  @default(SENT)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  JobRequest   JobRequests @relation(fields: [jobRequestId], references: [id])
  Driver       Users       @relation(fields: [driverId], references: [id])
}

model ProductCategories {
  id        Int        @id @default(autoincrement())
  name      String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Products  Products[]
}

model Products {
  id              Int               @id @default(autoincrement())
  categoryId      Int
  name            String
  description     String
  price           Decimal
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  ProductCategory ProductCategories @relation(fields: [categoryId], references: [id])
  ProductImages   ProductImages[]
  OrderDetails    OrderDetails[]
}

model ProductImages {
  id           Int      @id @default(autoincrement())
  productId    Int
  originalName String
  fileName     String
  mimetype     String
  size         Int
  isPrimary    Boolean
  createdAt    DateTime @default(now())
  Product      Products @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Orders {
  id           Int            @id @default(autoincrement())
  userId       Int
  status       ORDER_STATUS   @default(PENDING)
  totalAmount  Float
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  User         Users          @relation(fields: [userId], references: [id])
  OrderDetails OrderDetails[]
}

model OrderDetails {
  id        Int      @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Order     Orders   @relation(fields: [orderId], references: [id])
  Product   Products @relation(fields: [productId], references: [id])
}

model Feedback {
  id             Int              @id @default(autoincrement())
  userId         Int
  text           String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  User           Users            @relation(fields: [userId], references: [id])
  FeedbackImages FeedbackImages[]
}

model FeedbackImages {
  id           Int      @id @default(autoincrement())
  feedbackId   Int
  originalName String
  fileName     String
  mimetype     String
  size         Float
  createdAt    DateTime @default(now())
  Feedback     Feedback @relation(fields: [feedbackId], references: [id])
}

enum USER_ROLES {
  USER
  DRIVER
  ADMIN
}

enum GENDERS {
  MALE
  FEMALE
  OTHER
}

enum OTPT_TYPE {
  PHONE_NUMBER
  EMAIL
}

enum JOB_STATUS {
  SENT
  ACCEPTED
  DECLINED
  EXPIRED
  DONE
}

enum ORDER_STATUS {
  PENDING
  COMPLETE
}

enum LOGIN_METHODS {
  EMAIL
  PHONE_NUMBER
  GOOGLE
  FACEBOOK
  APPLE
}
